***ANSWER ALL OF THE QUESTIONS BELOW***

Why do we need data structure?
Answer:n order to locate and retrieve  data it is required to have data in a structured form.Structured form of data makes
            retrieval and manipulation easy.

What are the various operations that can be performed on different data structures?
Answer:     1.Searching
            2. Sorting
            3. Insertion
            4. Deletion
            5. Merging
            6. Traversing

When would we use data structures in the real world?
Answer:1. Compiler Design,
            2. Operating System,
            3. Database Management System,
            4. Statistical analysis package,
            5. Numerical Analysis,
            6. Graphics,
            7. Artificial Intelligence,
            8. Simulation

What is an Array?
Answer:An array is a container object that holds a fixed number of values of a single type.
the length of an array is established when the array is created. After creation, its length is fixed.
       What is the difference between Array and ArrayList?

What is a LinkedList?
Answer: A linked list is linear data Structure where each element is a separate object which is called
             node. Each node has data and reference to the next node. Last node has reference to null.

How is an Array different from LinkedList?
Answer:1. An array element is having index number, but a node is having reference to next node.
            2. In array each element is independent, does not have any connection to the other element
               on the other hand in linked list each node are connected by previous node.
            3. In Linked list, location or address of elements is stored in the link part of previous
               element/node. In array, no pointers are used like linked list, so no need of extra space
               in memory for pointer.
            4. Linked list consumed extra memory as the link location need to be saved in in the linked
               part of the previous elements in case of array it is not required.

What is a Queue?
Answer:It is a linear data structure where elements can be accessed on the basis of FIFO

What is a Stack (referring to data structures)?
Answer:Stack is linear data structure where elements can be accessed on the basis of LIFO.

What is FIFO and LIFO?
Answer: FIFO: First in First out. Example: In Queue data can be accessed by FIFO method.
             LIFO: Last in First out. Example: In Stack elements can be accessed on the basis of LIFO

Explain Big O Notation?
Answer: Big O Notation is a tool used to describe the time complexity of algorithms.
 It calculates the time taken to run an algorithm as the input grows.
 In other words, it calculates the worst-case time complexity of an algorithm.
 Big O Notation in Data Structure describes the upper bound of an algorithm's runtime

What is the best case to search an element from an array?
Answer: Binary search & sorting algorithm

What is the worst case to search an element from an array?
Answer:For an unsorted array, we have to search element by element, until the element is found or array is completely
            traversed. Element can be at 1st position, the last position or somewhere in between. The worst case arises when
            the element is at last position or not in the array, therefore we have to traverse the whole array giving n no.
            of repetitions over loop. Therefore the worst case time complexity is O(n).

Describe what a tree data structure is?
Answer:A tree is a nonlinear data structure whereas arrays, linked lists, stacks and queues are linear data structures.
            It can be empty of nodes or a tree can be a structure consisting of one node called the root and zero or one or more
            sub-trees

Describe what a graph data structure is?
Answer:A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as
            vertices and the edges are lines or arcs that connect any two nodes in the graph. For example, in Facebook,
            each person is represented with a vertex(or node). Each node is a structure and contains information like
            person id, name, gender, locale etc.

What is the difference between the HashTable and HashMap?
Answer:HashTable is synchronized, HashMap is not. Therefore it makes HashMap efficient with non-threaded applications
            because unsynchronized objects perform better than synchronized objects. HashTable do not allow null keys or values
            where HashMap does allow one null key and unlimited null values.

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer:A HashMap element has key and value in Java, elements are stored against a key. Map Interface implemented on HashMap
            in Java Collection Framework. elements manipulation is easy on the basis of key of the value.

What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer:It is a class in Java API, which extends IndexOutOfBoundException. IndexOutOfBoundsException occur when an array
            has been accessed with an illegal index. Index either negative or greater than or equal to the size of the array.

What are the different ways of copying an array into another array?
Answer:There are mainly four different ways to copy all elements of one array into another array in Java-
            1. Manually 2. Arrays.copyOf() 3. System.arraycopy() 4. Object.clone()


What is DFS and BFS?
Answer:Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structure.
            This one starts at the root and explores as far as possible along each branch before backtracking.
            Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structure.
            It starts at the tree roots and explores the neighbour nodes first before visiting to the next level of neighbours.

What is Recursion?
Answer:It is the process where a method calls itself inside the method. he method which causes recursion is called
            recursive method.

What are linear and non-linear data Structures?
Answer:Linear Data Structures: The data structure where data items are organized sequentially or linearly where data
            elements attached one after another is called linear data structure.
            Examples of linear data structures are Arrays, Stack, Queue and Linked List.
            Non Linear Data Structures: The data structure where data items are not organized sequentially is called non
            linear data structure. Examples of non linear data structures are Trees and Graphs.

Outline different sorting algorithms and their time complexities:
1. Bubble sort: It is a comparison algorithm. It works by repeatedly stepping
     through the list to be sorted, comparing each pair of adjacent items and swapping them
     if they are in the wrong order. The pass through the list is repeated until no swaps are
     needed, which indicates that the list is sorted.
     Worst case performance: O(n2)
     Best case performance: O(n)
     Average case performance: O(n2)
     Worst case space complexity: O(n) total, O(1) auxiliary
     Bubble sort is not a practical sorting algorithm when n is large.

2.Selection sort: It is an in-place comparison sort.Selection sort is noted for its simplicity,
     and also has performance advantages over more complicated algorithms in certain situations.
     Worst case performance: O(n2)
     Best case performance: O(n2)
     Average case performance: O(n2)
     Worst case space complexity: O(n) total, O(1) auxiliary

3.Insertion sort: It is a comparison sort in which the sorted array (or list) is built one entry
  at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort,
     heapsort, or merge sort.
     Worst case performance: O(n2)
     Best case performance: O(n)
     Average case performance: O(n2)
     Worst case space complexity: O(n) total, O(1) auxiliary

4. Merge sort: It is an O(n log n) comparison-based sorting algorithm.
     Worst case performance: O(n log n)
     Best case performance: O(n log n) typical
     Average case performance: O(n log n)
     Worst case space complexity: O(n) total, O(n) auxiliary

5.Quick sort: It is similar to merge sort in many ways. It divides the elements to be sorted into
 two groups, sorts the two groups by recursive calls, and combines the two sorted groups into
     a single array of sorted values.
     The choice of a good pivot element is critical to the efficiency of the quicksort algorithm.
     If we can ensure that the pivot element is near the median of the array values, then quicksort is very efficient.
     on average, makes O(n log n) comparisons to sort n items, in the worst case, it makes O(n2) comparisons

